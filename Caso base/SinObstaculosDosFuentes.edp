// ============================================================================
// =                          OUTER WALL BORDER                               =
// ============================================================================
//
//  Attach the file as input.
//
string filename = "points_outer.txt";

ifstream file ( filename );
cout << "\n";
cout << "Reading data from '" << filename << "'\n";
//
//  Read the number of points.
//
int nn = 0;
file >> nn;
cout << "  Number of nodes = "<< nn << endl;
//
//  Read the X and Y coordinates.
//
real[int] Gxx(nn);
real[int] Gyy(nn);
for ( int i = 0; i < nn; i++ )
{
  file >> Gxx[i] >> Gyy[i];
}
//
//  List the nodes.
//
cout << "\n";
cout << "  Boundary nodes:\n";
cout << "\n";
for ( int i = 0; i < nn; i++ )
{
  cout << "  " << i
       << "  " << Gxx[i]
       << "  " << Gyy[i] << endl;
}
//
//  Create the corresponding border.
//
int bx = 1;

border GsupOuter ( t = 0, nn - 1 )
{
  int i = min ( int ( t ), Gxx.n - 2 );
  real t1 = t - i;
  x = Gxx[i] * ( 1.0 - ( t - i ) ) + Gxx[i+1] * ( t - i );
  y = Gyy[i] * ( 1.0 - ( t - i ) ) + Gyy[i+1] * ( t - i );
  label = 1;
}


// ============================================================================
// =                          INNER WALL BORDER                               =
// ============================================================================
//
//  Read the number of points.
//
int nn2 = 13;

//
//  Read the X and Y coordinates.
//
real[int] Gxx2 = [5.0,45.0,45.0,105.0,105.0,145.0,145.0,95.0,95.0,55.0,55.0,5.0,5.0];
real[int] Gyy2 = [5.0,5.0,55.0,55.0,5.0,5.0,70.0,70.0,120.0,120.0,70.0,70.0,5.0];

//
//  List the nodes.
//
cout << "\n";
cout << "  Boundary nodes:\n";
cout << "\n";
for ( int i = 0; i < nn2; i++ )
{
  cout << "  " << i
       << "  " << Gxx2[i]
       << "  " << Gyy2[i] << endl;
}
//
//  Create the corresponding border.
//
int bx2 = 1;

border GsupInner ( t = 0, nn2 - 1 )
{
  int i = min ( int ( t ), Gxx2.n - 2 );
  real t1 = t - i;
  x = Gxx2[i] * ( 1.0 - ( t - i ) ) + Gxx2[i+1] * ( t - i );
  y = Gyy2[i] * ( 1.0 - ( t - i ) ) + Gyy2[i+1] * ( t - i );
  label = 3;
}



// ============================================================================
// =                              WIFI HOTSPOT                                =
// ============================================================================
border C(t=0, 2*pi){x=12+cos(t); y=bx*15+sin(t); label=2;}
border D(t=0, 2*pi){x=120+cos(t); y=bx*15+sin(t); label=2;}


// ============================================================================
// =                              CRETE THE MESH                              =
// ============================================================================
mesh Th = buildmesh ( GsupOuter( nn * 300 ) + GsupInner( nn * 300 ) + C(300) + D(300) );
plot ( Th, wait = 1, ps = "mesh_points_mesh.ps", cmm = "mesh_points mesh" );




// ============================================================================
// =                              WALL FUNCTION                               =
// ============================================================================
func real wall() {
   // Check if x, y in region A
   if((x >= 0 && x <= 5) && (y >= 0 && y <= 75)){
    return 1;
  }
  // Check if x, y in region B
  if((x >= 0 && x <= 50) && (y >= 0 && y <= 5)){
   return 1;
 }
 // Check if x, y in region C
 if((x >= 45 && x <= 50) && (y >= 0 && y <= 55)){
  return 1;
}
// Check if x, y in region D
if((x >= 45 && x <= 105) && (y >= 50 && y <= 55)){
 return 1;
}
// Check if x, y in region E
if((x >= 100 && x <= 105) && (y >= 0 && y <= 55)){
 return 1;
}
// Check if x, y in region F
if((x >= 100 && x <= 150) && (y >= 0 && y <= 5)){
 return 1;
}
// Check if x, y in region G
if((x >= 145 && x <= 150) && (y >= 0 && y <= 75)){
 return 1;
}
// Check if x, y in region H
if((x >= 95 && x <= 150) && (y >= 70 && y <= 75)){
 return 1;
}
// Check if x, y in region I
if((x >= 95 && x <= 100) && (y >= 70 && y <= 125)){
 return 1;
}
// Check if x, y in region J
if((x >= 50 && x <= 100) && (y >= 120 && y <= 125)){
 return 1;
}
// Check if x, y in region K
if((x >= 50 && x <= 55) && (y >= 70 && y <= 125)){
 return 1;
}
// Check if x, y in region L
if((x >= 0 && x <= 55) && (y >= 70 && y <= 75)){
 return 1;
}
  return 0;
}


// ============================================================================
// =                              SOLVE PROBLEM                               =
// ============================================================================
//
//  Solve a problem on this mesh.
//
//  Define the finite element space.
//
fespace Vh(Th, P1);

Vh<complex> v,w;

randinit(900);
Vh wallreflexion = randreal1();
Vh<complex> wallabsorption = randreal1()*0.5i;
Vh k = 6;


problem muwave(v,w) =
    int2d(Th)(
          (v*w*k^2)/(1+(wallreflexion+wallabsorption)*wall())^2
        - (dx(v)*dx(w)+dy(v)*dy(w))
    )
    + on(2, v=1)
    ;

muwave;
Vh vm = log(real(v)^2 + imag(v)^2);
plot(vm, wait=1, fill=true, value=0, nbiso=65);
